From 26eec0cd2d3a80ecfe3ff5ebad8cf921c5f2efdb Mon Sep 17 00:00:00 2001
From: Ali Polatel <hawking@gentoo.org>
Date: Sun, 26 Oct 2008 16:19:14 +0200
Subject: [PATCH 07/10] Respect C{,XX}FLAGS.
Organization: Gentoo

---
 Lib/distutils/ccompiler.py     |    5 ++++-
 Lib/distutils/sysconfig.py     |   15 +++++++++++----
 Lib/distutils/unixccompiler.py |   11 +++++++++--
 3 files changed, 24 insertions(+), 7 deletions(-)

diff --git a/Lib/distutils/ccompiler.py b/Lib/distutils/ccompiler.py
index 0e78466..73d6fff 100644
--- a/Lib/distutils/ccompiler.py
+++ b/Lib/distutils/ccompiler.py
@@ -688,13 +688,16 @@ class CCompiler:
                 self._setup_compile(output_dir, macros, include_dirs, sources,
                                     depends, extra_postargs)
         cc_args = self._get_cc_args(pp_opts, debug, extra_preargs)
+        
+        lang = self.detect_language(sources)
 
         for obj in objects:
             try:
                 src, ext = build[obj]
             except KeyError:
                 continue
-            self._compile(obj, src, ext, cc_args, extra_postargs, pp_opts)
+            self._compile(obj, src, ext, cc_args, extra_postargs, pp_opts,
+                    lang=lang)
 
         # Return *all* object filenames, not just the ones we just built.
         return objects
diff --git a/Lib/distutils/sysconfig.py b/Lib/distutils/sysconfig.py
index aa4e37d..1130c3c 100644
--- a/Lib/distutils/sysconfig.py
+++ b/Lib/distutils/sysconfig.py
@@ -163,9 +163,9 @@ def customize_compiler(compiler):
     varies across Unices and is stored in Python's Makefile.
     """
     if compiler.compiler_type == "unix":
-        (cc, cxx, opt, cflags, ccshared, ldshared, so_ext) = \
-            get_config_vars('CC', 'CXX', 'OPT', 'CFLAGS',
-                            'CCSHARED', 'LDSHARED', 'SO')
+        (cc, cxx, opt, cflags, basecflags, ccshared, ldshared, so_ext, cxxflags) = (
+            get_config_vars('CC', 'CXX', 'OPT', 'CFLAGS', 'BASECFLAGS',
+                            'CCSHARED', 'LDSHARED', 'SO', 'CXXFLAGS'))
 
         if 'CC' in os.environ:
             cc = os.environ['CC']
@@ -180,19 +180,25 @@ def customize_compiler(compiler):
         if 'LDFLAGS' in os.environ:
             ldshared = ldshared + ' ' + os.environ['LDFLAGS']
         if 'CFLAGS' in os.environ:
-            cflags = opt + ' ' + os.environ['CFLAGS']
+            cflags = basecflags + ' ' + os.environ['CFLAGS']
             ldshared = ldshared + ' ' + os.environ['CFLAGS']
         if 'CPPFLAGS' in os.environ:
             cpp = cpp + ' ' + os.environ['CPPFLAGS']
             cflags = cflags + ' ' + os.environ['CPPFLAGS']
             ldshared = ldshared + ' ' + os.environ['CPPFLAGS']
+        if 'CXXFLAGS' in os.environ:
+            cxxflags = opt + ' ' + os.environ['CXXFLAGS']
 
         cc_cmd = cc + ' ' + cflags
+        cxx_cmd = cxx
+        if cxxflags is not None:
+            cxx_cmd = cxx + ' ' + cxxflags
         compiler.set_executables(
             preprocessor=cpp,
             compiler=cc_cmd,
             compiler_so=cc_cmd + ' ' + ccshared,
             compiler_cxx=cxx,
+            compiler_cxx_so=cxx_cmd + ' ' + ccshared,
             linker_so=ldshared,
             linker_exe=cc)
 
@@ -534,6 +540,7 @@ def get_config_vars(*args):
                 for key in ('LDFLAGS', 'BASECFLAGS',
                         # a number of derived variables. These need to be
                         # patched up as well.
+                        'CXXFLAGS',
                         'CFLAGS', 'PY_CFLAGS', 'BLDSHARED'):
                     flags = _config_vars[key]
                     flags = re.sub('-arch\s+\w+\s', ' ', flags)
diff --git a/Lib/distutils/unixccompiler.py b/Lib/distutils/unixccompiler.py
index f175d90..bccb952 100644
--- a/Lib/distutils/unixccompiler.py
+++ b/Lib/distutils/unixccompiler.py
@@ -118,6 +118,7 @@ class UnixCCompiler(CCompiler):
                    'compiler'     : ["cc"],
                    'compiler_so'  : ["cc"],
                    'compiler_cxx' : ["cc"],
+                   'compiler_cxx_so' : ["cc"],
                    'linker_so'    : ["cc", "-shared"],
                    'linker_exe'   : ["cc"],
                    'archiver'     : ["ar", "-cr"],
@@ -169,12 +170,18 @@ class UnixCCompiler(CCompiler):
             except DistutilsExecError, msg:
                 raise CompileError, msg
 
-    def _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts):
+    def _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts,
+            lang='c'):
         compiler_so = self.compiler_so
+        compiler_cxx_so = self.compiler_cxx_so
         if sys.platform == 'darwin':
             compiler_so = _darwin_compiler_fixup(compiler_so, cc_args + extra_postargs)
         try:
-            self.spawn(compiler_so + cc_args + [src, '-o', obj] +
+            if lang == 'c++':
+                cc = compiler_cxx_so + cc_args
+            else:
+                cc = compiler_so + cc_args
+            self.spawn(cc + cc_args + [src, '-o', obj] +
                        extra_postargs)
         except DistutilsExecError, msg:
             raise CompileError, msg
-- 
1.6.0.2

