# Copyright 2011 NAKAMURA Yoshitaka
# Distributed under the terms of the GNU General Public License v2

SUMMARY="fast, compliant alternative implementation of the Python language"
HOMEPAGE="http://pypy.org/"
DOWNLOADS="https://bitbucket.org/pypy/pypy/downloads/${PNV}-src.tar.bz2"
# XXX: they depend on old openssl so can't use in exherbo
#    bootstrap? (
#        platform:amd64? (
#            https://bitbucket.org/${PN}/${PN}/downloads/${PNV}-linux64.tar.bz2
#        )
#        platform:x86? (
#            https://bitbucket.org/${PN}/${PN}/downloads/${PNV}-linux.tar.bz2
#        )
#    )

LICENCES="MIT"
SLOT="0"
PLATFORMS="~amd64"
#MYOPTIONS="bootstrap platform: amd64 x86"
MYOPTIONS="expat gdbm ncurses sqlite ssl tk
    bootstrap [[ description = [ use CPython to build pypy ] ]]
"

DEPENDENCIES="
    build:
        dev-libs/libffi
        virtual/pkg-config
        bootstrap? ( dev-lang/python:*[>=2.5&<3.0] )
        !bootstrap? ( dev-lang/pypy )
        expat? ( dev-libs/expat )
        gdbm? ( sys-libs/gdbm )
        ncurses? ( sys-libs/ncurses )
        sqlite? ( dev-db/sqlite:3 )
        ssl? ( dev-libs/openssl )
        tk? ( dev-lang/tk )
"

WORK="${WORKBASE}"/${PNV}-src

#BOOTSTRAP_ID_AMD64="43780-b590cf6de419"
#BOOTSTRAP_ID_X86=""

src_prepare() {
    default

    edo mkdir "${WORKBASE}"/bin
    for tool in cc pkg-config; do
        edo ln -s /usr/$(exhost --target)/bin/$(exhost --target)-${tool} "${WORKBASE}"/bin/${tool}
    done
    export PATH="${PATH}:${WORKBASE}/bin"
}

src_compile() {
    #if option bootstrap; then
    #    if option platform:amd64; then
    #        "${WORKBASE}"/${PN}-c-jit-${BOOTSTRAP_ID_AMD64}-linux64/bin/pypy
    #    elif option platform:x86; then
    #        "${WORKBASE}"/${PN}-c-jit-${BOOTSTRAP_ID_X86}-linux/bin/pypy
    #    else
    #        die "no bootstrap binary for youre platform"
    #    fi
    #else
    #    pypy=pypy
    #fi
    if option bootstrap; then
        pypy=python2
    else
        pypy=pypy
    fi

    local myopts=()

    if option expat; then
        myopts+=( --withmod-pyexpat )
    else
        myopts+=( --withoutmod-pyexpat )
    fi

    if option ncurses; then
        myopts+=( --withmod-_minimal_curses )
    else
        myopts+=( --withoutmod-_minimal_curses )
    fi

    if option ssl; then
        myopts+=( --withmod-_ssl )
    else
        myopts+=( --withoutmod-_ssl )
    fi

    edo pushd pypy/goal
    edo "${pypy}" ../../rpython/bin/rpython -Ojit targetpypystandalone "${myopts[@]}"
    edo popd

    # generate cffi libraries
    local cffi_build_scripts=(
        _audioop_build.py
        _syslog_build.py
        _pwdgrp_build.py
    )
    if option gdbm; then
        cffi_build_scripts+=(_gdbm_build.py)
    fi
    if option ncurses; then
        cffi_build_scripts+=(_curses_build.py)
    fi
    if option sqlite; then
        cffi_build_scripts+=(_sqlite3_build.py)
    fi
    if option tk; then
        cffi_build_scripts+=(_tkinter/tklib_build.py)
    fi

    edo pushd lib_pypy

    for s in ${cffi_build_scripts[@]}; do
        # XXX: unset CFLAGS to avoid `bad value` error
        edo env -u CFLAGS -u CXXFLAGS \
            PYTHONPATH="${WORK}/lib-python/2.7:${WORK}/lib_pypy" \
            "${WORK}"/pypy/goal/pypy-c ${s}
    done

    edo popd
}

src_install() {
    prefix=/usr/$(exhost --target)/lib/pypy

    exeinto "${prefix}"/bin
    doexe "${WORK}"/pypy/goal/pypy-c
    doexe "${WORK}"/pypy/goal/libpypy-c.so

    dodir "${prefix}"/lib-python/
    # to copy executable bit, use cp instead of doins
    edo cp -r "${WORK}"/lib-python/2.7 "${IMAGE}/${prefix}"/lib-python/
    edo cp -r "${WORK}"/lib_pypy "${WORK}"/include "${IMAGE}/${prefix}"

    keepdir "${prefix}"/site-packages

    dodir /usr/$(exhost --target)/bin
    dosym "${prefix}"/bin/pypy-c /usr/$(exhost --target)/bin/pypy

    # generate pyc and pyo
    for d in lib-python lib_pypy; do
        edo "${IMAGE}/${prefix}/bin/pypy-c" \
            -mcompileall -f -q -d "${prefix}/${d}" -x "/tests?/" \
            "${IMAGE}/${prefix}/${d}"
        edo "${IMAGE}/${prefix}/bin/pypy-c" -O \
            -mcompileall -f -q -d "${prefix}/${d}" -x "/tests?/" \
            "${IMAGE}/${prefix}/${d}"
    done

    emagicdocs
}

