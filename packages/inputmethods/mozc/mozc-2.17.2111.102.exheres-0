# Copyright 2012 NAKAMURA Yoshitaka
# Distributed under the terms of the GNU General Public License v2

SCM_TYPE="git"
SCM_REPOSITORY="https://github.com/google/mozc.git"
SCM_REVISION="d7b6196aeac52dd908ca051ba65e97b389f4503a"
SCM_CHECKOUT_TO="mozc"

SCM_gyp_TYPE="git"
SCM_gyp_REPOSITORY="https://chromium.googlesource.com/external/gyp"
SCM_gyp_REVISION="cdf037c1edc0ba3b5d25f8e3973661efe00980cc"
SCM_gyp_CHECKOUT_TO="gyp"
SCM_gyp_UNPACK_TO="gyp"

SCM_japaneseusagedictionary_TYPE="svn"
SCM_japaneseusagedictionary_REPOSITORY="http://japanese-usage-dictionary.googlecode.com/svn/"
SCM_japaneseusagedictionary_REVISION="10"
SCM_japaneseusagedictionary_CHECKOUT_TO="japanese_usage_dictionary"
SCM_SECONDARY_REPOSITORIES="gyp japaneseusagedictionary"
require scm

require elisp-optional [ source_directory=src/unix/emacs ] python [ has_bin=false has_lib=false ]

PROTOBUF_PV=2.5.0

SUMMARY="Japanese Input Method"
HOMEPAGE="http://code.google.com/p/mozc/"
DOWNLOADS="
    http://protobuf.googlecode.com/files/protobuf-${PROTOBUF_PV}.tar.bz2
"

LICENCES="BSD-2"
SLOT="0"
PLATFORMS="~amd64"
MYOPTIONS="ibus"

DEPENDENCIES="
    build:
        dev-lang/clang[>=3.4]
        dev-lang/python:*[>=2&<3]
        dev-util/pkg-config
        sys-devel/ninja
    build+run:
        dev-libs/glib:2
        dev-libs/zinnia
        x11-libs/libxcb
        x11-libs/gtk+:2
        x11-libs/qt:4
        ibus? ( inputmethods/ibus )
"

src_unpack() {
    default

    scm_src_unpack
}

src_prepare() {
    default

    edo ln -s "${WORKBASE}"/protobuf-${PROTOBUF_PV} "${WORK}"/src/third_party/protobuf
    edo ln -s "${WORKBASE}"/gyp "${WORK}"/src/third_party/gyp
    edo ln -s "${WORKBASE}"/japaneseusagedictionary "${WORK}"/src/third_party/japanese_usage_dictionary

    # mozc hardcod some tools
    local dir=${WORKBASE}/symlinked-build-tools
    edo mkdir -p ${dir}
    for t in ar ld nm pkg-config readelf; do
        edo ln -s /usr/$(exhost --target)/bin/$(exhost --target)-${t} ${dir}/${t}
    done
    export PATH="${dir}:${PATH}"
}

src_configure() {
    edo cd "${WORK}"/src

    # mozc uses $CXX as a linker by default
    # but if $LD is defined, use it instead and fail to link
    LD="${CXX}" \
        GYP_DEFINES="ibus_mozc_path=/usr/$(exhost --target)/lib/ibus-mozc/ibus-engine-mozc" \
        edo ${PYTHON} build_mozc.py gyp --server_dir=/usr/$(exhost --target)/lib/mozc
}

src_compile() {
    edo cd "${WORK}"/src

    local myargs=(
        server/server.gyp:mozc_server
        gui/gui.gyp:mozc_tool
    )

    if option emacs; then
        myargs+=(
            unix/emacs/emacs.gyp:mozc_emacs_helper
        )
    fi

    if option ibus; then
        myargs+=(
            unix/ibus/ibus.gyp:ibus_mozc
        )
    fi

    edo ${PYTHON} build_mozc.py build -j ${EXJOBS} -c Release "${myargs[@]}"

    elisp-optional_src_compile
}

src_install() {
    edo cd "${WORK}"/src

    exeinto /usr/$(exhost --target)/lib/mozc
    doexe out_linux/Release/mozc_server
    doexe out_linux/Release/mozc_tool

    elisp-optional_src_install

    if option emacs; then
        dobin out_linux/Release/mozc_emacs_helper
    fi

    if option ibus; then
        exeinto /usr/$(exhost --target)/lib/ibus-mozc/
        newexe out_linux/Release/ibus_mozc ibus-engine-mozc

        insinto /usr/share/ibus/component
        doins out_linux/Release/gen/unix/ibus/mozc.xml

        edo pushd data/images/unix
        insinto /usr/share/ibus-mozc
        newins ime_product_icon_opensource-32.png product_icon.png
        for f in ui-*.png; do
            newins ${f} ${f#ui-}
        done
        edo popd
    fi
}

