# Copyright 2012 NAKAMURA Yoshitaka
# Distributed under the terms of the GNU General Public License v2

SCM_REPOSITORY="https://chromium.googlesource.com/external/gyp"
SCM_CHECKOUT_TO="gyp"
SCM_UNPACK_TO="gyp"
require scm-git

require elisp-optional [ source_directory=unix/emacs ] python [ has_bin=false has_lib=false ]

PROTOBUF_PV=2.5.0

SUMMARY="Japanese Input Method"
HOMEPAGE="http://code.google.com/p/mozc/"
DOWNLOADS="
    https://launchpad.net/ubuntu/+archive/primary/+files/${PN}_${PV}.orig.tar.gz 
    http://protobuf.googlecode.com/files/protobuf-${PROTOBUF_PV}.tar.bz2
"
# XXX: upstream project stop providing release tar ball
#    http://mozc.googlecode.com/files/${PNV}.tar.bz2

LICENCES="BSD-2"
SLOT="0"
PLATFORMS="~amd64"
MYOPTIONS="
    ibus [[ description = [ build IBus engine module ] ]]
"

DEPENDENCIES="
    build:
        dev-lang/python:*[>=2&<3]
        dev-util/pkg-config
        sys-devel/ninja
    build+run:
        dev-libs/glib:2
        dev-libs/zinnia
        x11-libs/libxcb
        x11-libs/gtk+:2
        x11-libs/qt:4
        ibus? (
            inputmethods/ibus[>=1.4.1]
        )
"

src_unpack() {
    default

    scm_src_unpack
}

src_prepare() {
    default

    edo ln -s "${WORKBASE}"/protobuf-${PROTOBUF_PV} "${WORK}"/third_party/protobuf
    edo ln -s "${WORKBASE}"/gyp "${WORK}"/third_party/gyp

    # mozc hardcoded ar
    local dir=${WORKBASE}/symlinked-build-tools
    edo mkdir -p ${dir}
    edo ln -s /usr/$(exhost --target)/bin/$(exhost --target)-ar ${dir}/ar
    export PATH="${dir}:${PATH}"
}

src_configure() {
    # mozc uses $CXX as a linker by default
    # but if $LD is defined, use it instead and fail to link
    LD="${CXX}" edo ${PYTHON} build_mozc.py gyp --server_dir=/usr/$(exhost --target)/lib/mozc
}

src_compile() {
    local myargs=(
        server/server.gyp:mozc_server
        gui/gui.gyp:mozc_tool
    )

    if option emacs; then
        myargs+=(
            unix/emacs/emacs.gyp:mozc_emacs_helper
        )
    fi

    if option ibus; then
        myargs+=(
            unix/ibus/ibus.gyp:ibus_mozc
            renderer/renderer.gyp:mozc_renderer
        )
    fi

    edo ${PYTHON} build_mozc.py build -j ${EXJOBS} -c Release "${myargs[@]}"

    elisp-optional_src_compile
}

src_install() {
    exeinto /usr/$(exhost --target)/lib/mozc
    doexe out_linux/Release/mozc_server
    doexe out_linux/Release/mozc_tool

    elisp-optional_src_install

    if option emacs; then
        dobin out_linux/Release/mozc_emacs_helper
    fi

    if option ibus; then
        exeinto /usr/$(exhost --target)/lib/mozc
        doexe out_linux/Release/mozc_renderer

        exeinto /usr/$(exhost --target)/libexec
        newexe out_linux/Release/ibus_mozc ibus-engine-mozc

        insinto /usr/share/ibus/component
        doins out_linux/Release/gen/unix/ibus/mozc.xml

        insinto /usr/share/ibus-mozc
        pushd data/images/unix
        newins ime_product_icon_opensource-32.png product_icon.png
        for f in ui-*; do
            newins "${f}" "${f/ui-}"
        done
        popd
    fi
}

