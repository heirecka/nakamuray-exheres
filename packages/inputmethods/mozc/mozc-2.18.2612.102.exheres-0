# Copyright 2012 NAKAMURA Yoshitaka
# Distributed under the terms of the GNU General Public License v2

SCM_REPOSITORY="https://github.com/google/mozc.git"
SCM_REVISION="2315f957d1785130c2ed196e141a330b0857b065"
SCM_CHECKOUT_TO="mozc"

SCM_SECONDARY_REPOSITORIES="
    breakpad
    fontTools
    gtest
    gyp
    japanese_usage_dictionary
    jsoncpp
    protobuf
    zinnia
"

SCM_EXTERNAL_REFS="
    src/third_party/breakpad:breakpad
    src/third_party/fontTools:fontTools
    src/third_party/gtest:gtest
    src/third_party/gyp:gyp
    src/third_party/japanese_usage_dictionary:japanese_usage_dictionary
    src/third_party/jsoncpp:jsoncpp
    src/third_party/protobuf:protobuf
    src/third_party/zinnia:zinnia
"

SCM_breakpad_REPOSITORY="https://chromium.googlesource.com/breakpad/breakpad"
SCM_fontTools_REPOSITORY="https://github.com/googlei18n/fonttools.git"
SCM_gtest_REPOSITORY="https://github.com/google/googletest.git"
SCM_gyp_REPOSITORY="https://chromium.googlesource.com/external/gyp"
SCM_japanese_usage_dictionary_REPOSITORY="https://github.com/hiroyuki-komatsu/japanese-usage-dictionary.git"
SCM_jsoncpp_REPOSITORY="https://github.com/open-source-parsers/jsoncpp.git"
SCM_protobuf_REPOSITORY="https://github.com/google/protobuf.git"
SCM_zinnia_REPOSITORY="https://github.com/taku910/zinnia.git"

require scm-git

require elisp-optional [ source_directory=src/unix/emacs ] python [ has_bin=false has_lib=false ]

SUMMARY="Japanese Input Method"
HOMEPAGE="https://github.com/google/mozc"
DOWNLOADS=""

LICENCES="BSD-2"
SLOT="0"
PLATFORMS="~amd64"
MYOPTIONS="ibus
    ( providers: qt4 qt5 ) [[ number-selected = exactly-one ]]
"

DEPENDENCIES="
    build:
        dev-lang/clang[>=3.4]
        dev-lang/python:*[>=2&<3]
        dev-util/pkg-config
        sys-devel/ninja
    build+run:
        dev-libs/glib:2
        x11-libs/libxcb
        x11-libs/gtk+:2
        providers:qt4? ( x11-libs/qt:4 )
        providers:qt5? ( x11-libs/qtbase:5 )
        ibus? ( inputmethods/ibus )
"

src_prepare() {
    default

    # mozc hardcod some tools
    local dir=${WORKBASE}/symlinked-build-tools
    edo mkdir -p ${dir}
    for t in ar ld nm pkg-config readelf; do
        edo ln -s /usr/$(exhost --target)/bin/$(exhost --target)-${t} ${dir}/${t}
    done
    export PATH="${dir}:${PATH}"
}

src_configure() {
    edo cd "${WORK}"/src

    local qtver

    if option providers:qt5; then
        qtver=5
    else
        qtver=4
    fi

    # mozc uses $CXX as a linker by default
    # but if $LD is defined, use it instead and fail to link
    LD="${CXX}" \
        GYP_DEFINES="ibus_mozc_path=/usr/$(exhost --target)/lib/ibus-mozc/ibus-engine-mozc" \
        edo ${PYTHON} build_mozc.py gyp --server_dir=/usr/$(exhost --target)/lib/mozc --qtver=${qtver}
}

src_compile() {
    edo cd "${WORK}"/src

    local myargs=(
        server/server.gyp:mozc_server
        gui/gui.gyp:mozc_tool
    )

    if option emacs; then
        myargs+=(
            unix/emacs/emacs.gyp:mozc_emacs_helper
        )
    fi

    if option ibus; then
        myargs+=(
            unix/ibus/ibus.gyp:ibus_mozc
        )
    fi

    edo ${PYTHON} build_mozc.py build -c Release "${myargs[@]}"

    elisp-optional_src_compile
}

src_install() {
    edo cd "${WORK}"/src

    exeinto /usr/$(exhost --target)/lib/mozc
    doexe out_linux/Release/mozc_server
    doexe out_linux/Release/mozc_tool

    elisp-optional_src_install

    if option emacs; then
        dobin out_linux/Release/mozc_emacs_helper
    fi

    if option ibus; then
        exeinto /usr/$(exhost --target)/lib/ibus-mozc/
        newexe out_linux/Release/ibus_mozc ibus-engine-mozc

        insinto /usr/share/ibus/component
        doins out_linux/Release/gen/unix/ibus/mozc.xml

        edo pushd data/images/unix
        insinto /usr/share/ibus-mozc
        newins ime_product_icon_opensource-32.png product_icon.png
        for f in ui-*.png; do
            newins ${f} ${f#ui-}
        done
        edo popd
    fi
}

